#!/usr/bin/env bash

set -o pipefail -o errtrace -o errexit -o nounset
shopt -s inherit_errexit

[[ -n "${TRACE:-}" ]] && set -o xtrace

# Set this to have this PID killed on ERR
CLEANUP_PID=""

trap 'cleanup "Error trapped rc=${PIPESTATUS[@]}, see trace above"' ERR

cleanup() {
  if [[ "${CLEANUP_PID}" != "" ]]; then
    kill -9 "${CLEANUP_PID}" 2>/dev/null 1>&2 || true
  fi
  # Print stack trace
  local frame="${#FUNCNAME[@]}"
  echo >&2 "Stacktrace:"
  while [[ "${frame}" -gt 1 ]]; do
    ((frame--))
    echo >&2 "  File ${BASH_SOURCE[$frame]}#L${BASH_LINENO[$((frame - 1))]} (in ${FUNCNAME[$frame]}())"
  done
  if [[ "$#" -gt 0 ]]; then
    echo >&2 "$1"
  fi
}

: "${NEOBENCH_PATH:?Please set NEOBENCH_PATH to the neobench binary you want to test}"

SCRIPTPATH="$( cd "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"
TEMP="${SCRIPTPATH}/../tmp/test"

main() {
  mkdir -p "${TEMP}"
  test_prometheus_output
  test_error_exit_codes
  test_tpcb_like
  test_custom_script
  test_mixed_scripts
  test_named_database
  test_csv_parameter
  #test_ldbc_like # TODO this is insanely slow.. can we run with a smaller --scale somehow?
}

test_tpcb_like() {
  echo "Running test_tpcb_like.."
  setup_db

  "${NEOBENCH_PATH}" -i -p secret -b tpcb-like -d 5s
  "${NEOBENCH_PATH}" -i -p secret -b tpcb-like -d 5s --latency
  "${NEOBENCH_PATH}" -i -p secret -b match-only -d 5s
}

test_ldbc_like() {
  echo "Running test_ldbc_like.."
  setup_db

  "${NEOBENCH_PATH}" -i -p secret -b ldbc-like -d 5s
  "${NEOBENCH_PATH}" -i -p secret -b ldbc-like -d 5s --latency
}

test_named_database() {
  echo "Running test_named_database.."
  setup_db

  local out="${TEMP}/named.out"
  cypher-shell -u neo4j -p secret -d system "CREATE DATABASE neobenchdb;"

  "${NEOBENCH_PATH}" -p secret -d 5s neobenchdb | tee "${out}"

  local workload succeeded
  workload="$(tail -n 1 "${out}" | cut -d',' -f1)"
  succeeded="$(tail -n 1 "${out}" | cut -d',' -f2)"
  if [[ "${workload}" != '"builtin:tpcp-like"' ]]; then
    echo >&2 "Expected workload to be builtin:tpcp-like, got ${workload}"
    exit 1
  fi
  if [[ "${succeeded}" == "0"* ]]; then
    echo >&2 "Expected at least some successful queries, got ${succeeded}"
    exit 1
  fi
}

test_custom_script() {
  echo "Running test_custom_script.."
  setup_db

  "${NEOBENCH_PATH}" -p secret -f "${SCRIPTPATH}/write.script" -d 5s --define myvar=12
  "${NEOBENCH_PATH}" -p secret -f "${SCRIPTPATH}/write.script" -d 5s --define myvar=12 --latency

  # Specify custom scripts directly on the command line
  "${NEOBENCH_PATH}" -p secret -S 'RETURN $myvar' -d 5s --define myvar=12
}


test_csv_parameter() {
  echo "Running test_csv_parameter.."
  setup_db
  local out="${TEMP}/csv.out"

  "${NEOBENCH_PATH}" -p secret -S "
:set data csv(\"${SCRIPTPATH}/data.csv\")
RETURN \$data" -d 1s | tee "${out}"

  if ! grep -q "#0" "${out}"; then
    echo >&2 "Expected #0 in output above"
    exit 1
  fi
}

test_mixed_scripts() {
  echo "Running test_mixed_scripts.."
  setup_db
  local out="${TEMP}/mixed.out"

  "${NEOBENCH_PATH}" -p secret \
    -f "${SCRIPTPATH}/read.script@5" \
    -f "${SCRIPTPATH}/write.script@5" \
    -d 20s --define myvar=12 --latency | tee "${out}"

  if ! grep -q "read.script" "${out}"; then
    echo >&2 "Expected read.script in output above"
    exit 1
  fi
  if ! grep -q "write.script" "${out}"; then
    echo >&2 "Expected write.script in output above"
    exit 1
  fi
}

test_error_exit_codes() {
  echo "Running test_error_exit_codes.."
  local exitcode
  local out="${TEMP}/exit.out"

  "${NEOBENCH_PATH}" -p wontwork -d 1s > "${out}" 2>&1 || exitcode="$?"
  if [[ "${exitcode}" != "1" ]]; then
    echo >&2 "Expected command to exit with code 1 if given invalid credentials, got ${exitcode}"
    echo >&2 "== stdout+stderr =="
    cat "${out}" >&2
    echo >&2 "== /stdout+stderr =="
    exit 1
  fi

  "${NEOBENCH_PATH}" --no-such-flag > "${out}" 2>&1 || exitcode="$?"
  if [[ "${exitcode}" != "2" ]]; then
    echo >&2 "Expected command to exit with code 2 if given invalid flags, got ${exitcode}"
    echo >&2 "== stdout+stderr =="
    cat "${out}" >&2
    echo >&2 "== /stdout+stderr =="
    exit 1
  fi

  # Note the very long timeout as a hacky way to make sure we exit immediately rather than fail after
  "${NEOBENCH_PATH}" -p secret -f "${SCRIPTPATH}/syntaxerror.script" -d 1h > "${out}" 2>&1 || exitcode="$?"
  if [[ "${exitcode}" != "1" ]]; then
    echo >&2 "Expected command to exit with code 1 if given syntax error, got ${exitcode}"
    echo >&2 "== stdout+stderr =="
    cat "${out}" >&2
    echo >&2 "== /stdout+stderr =="
    exit 1
  fi

  # This script has a *very* long client-side sleep, which should not get executed before the preflight
  # mode detects the syntax error
  "${NEOBENCH_PATH}" -p secret -S ":sleep 1000000 s\nthisisasyntaxerror;" -d 1h > "${out}" 2>&1 || exitcode="$?"
  if [[ "${exitcode}" != "1" ]]; then
    echo >&2 "Expected command to exit with code 1 if given syntax error, got ${exitcode}"
    echo >&2 "== stdout+stderr =="
    cat "${out}" >&2
    echo >&2 "== /stdout+stderr =="
    exit 1
  fi
}

test_prometheus_output() {
  local prometheus_metrics
  local met_successful_tx_total met_failed_tx_total

  echo "Running test_prometheus_output.."
  setup_db

  # Start neobench in the background, keep the PID
  "${NEOBENCH_PATH}" --prometheus "localhost:8787" -p secret --script 'RETURN "Hello, world!"' -d 10m &
  CLEANUP_PID="$!"

  # Then, within some reasonable time, we should see prometheus metrics
  local deadline
  deadline="$(( SECONDS + 60 * 5))"
  while true; do
    sleep 5

    if [[ "${SECONDS}" -gt "${deadline}" ]]; then
      echo >&2 "[test_prometheus_output] expected prometheus metrics within 5 minutes"
      exit 1
    fi

    if ! prometheus_metrics="$(curl http://localhost:8787/metrics 2>/dev/null |  grep -v '#')"; then
      echo >&2 "[test_prometheus_output] Prometheus endpoint not yet responding.."
      continue
    fi

    met_successful_tx_total="$(echo "${prometheus_metrics}" | grep "neobench_successful_transactions_total" | cut -d' ' -f2)"
    if [[ "${met_successful_tx_total}" == "0" ]]; then
      echo >&2 "[test_prometheus_output] neobench_successful_transactions_total not yet > 0.."
      continue
    fi

    echo >&2 "[test_prometheus_output] all expected metrics present"
    break
  done

  kill -9 "${CLEANUP_PID}" || true
  CLEANUP_PID=""
}

setup_db() {
  # Clean up any leaked db
  teardown_db

  # Should make this swap between docker-compose
  # directories instead of hard-coding this command
  local name="${NEOBENCH_CONTAINER_NAME:-neobench-it}"
  docker run --user "$(id -u):$(id -g)" \
    --name "${NEOBENCH_CONTAINER_NAME:-neobench-it}" \
    --detach --rm \
    -e "NEO4J_ACCEPT_LICENSE_AGREEMENT=yes" \
    -e "NEO4J_AUTH=neo4j/secret" \
    -e "NEO4J_dbms_memory_pagecache_size=512m" \
    -e "NEO4J_dbms_memory_heap_initial__size=1g" \
    -e "NEO4J_dbms_memory_heap_max__size=1g" \
    -p 7474:7474 -p 7687:7687 \
    "${NEO4J_IMAGE}"

  # Wait for db to come up
  echo >&2 "Waiting for db to come up.."
  while ! docker logs neobench-it | grep --quiet "Bolt enabled on"; do
    sleep 5
    if [[ "$(docker ps --filter "name=neobench-it" | wc -l)" != "2" ]]; then
      echo >&2 "Database seems to have crashed?"
      docker logs neobench-it
      exit 1
    fi
    echo >&2 "Waiting for db to come up.."
  done
}

teardown_db() {
  local name="${NEOBENCH_CONTAINER_NAME:-neobench-it}"
  docker kill "${name}" 2>/dev/null 1>&2 || true
  docker rm "${name}" 2>/dev/null 1>&2 || true
}

main "$@"
